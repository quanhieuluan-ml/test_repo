name: Rebase pre-dev branches

on:
  workflow_dispatch:
    inputs:
      exclude:
        type: string
        required: false
        description: "Branches which should not be backported. Ex: pre-dev-dx1 pre-dev-mm1"
      include:
        type: string
        required: false
        description: "Branches which should also be backported too. Ex: pre-dev-dx1-edited pre-dev-mm1-custom"

jobs:
  init:
    runs-on: ubuntu-latest
    outputs:
      branches: ${{ steps.generate-matrix.outputs.branches }}
    steps:
      - name: Generate matrix
        id: generate-matrix
        env:
          input_exclude_branches: ${{ inputs.exclude }}
          input_include_branches: ${{ inputs.include }}
        run: |
          default_branches=$(git branch --list 'pre-dev*' | awk '{$1=$1};1' | jq -R . | jq -s .)
          exclude_branches=$(echo "$input_exclude_branches" | jq -R 'split(" ")')
          include_branches=$(echo "$input_include_branches" | jq -R 'split(" ")')
          target_branches=$(echo "$default_branches" | jq --argjson remove_list "$exclude_branches" --argjson add_list "$include_branches" '
            . as $array |
            ($array | map(select(. as $item | $remove_list | index($item) | not))) + $add_list
          ')
          echo "branches=$target_branches" >> $GITHUB_OUTPUT

  rebase:
    name: Rebase branch
    needs: init
    runs-on: ubuntu-latest
    strategy:
      matrix:
        branch: ${{ fromJSON(needs.init.outputs.branches) }}
    permissions:
      contents: write
    continue-on-error: true
    outputs:
      overall: ${{ steps.job-output.outputs.OVERALL }}
    steps:
      - name: Checkout main branch
        uses: actions/checkout@v4
        with:
          ref: main
          fetch-depth: 0

      - name: Checkout target branch
        run: |
          git checkout ${{ matrix.branch }}

      - name: Rebase onto main
        run: |
          git rebase origin/main

      - name: Push updated branch
        run: |
          git push origin ${{ matrix.branch }} --force-with-lease
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Handle result
        if: failure()
        id: job-output
        run: |
          echo "OVERALL=failure" >> $GITHUB_OUTPUT
          exit 1
  
  exit-with-failures:
    name: Exit with failure
    runs-on: ubuntu-latest
    needs: rebase
    if: needs.rebase.outputs.overall == 'failure'
    steps:
      - name: Failure exiting
        run: exit 1
