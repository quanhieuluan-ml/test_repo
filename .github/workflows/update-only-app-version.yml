name: Update only app version to the latest version
on:
  workflow_dispatch:
    inputs:
      app-version:
        description: App version to be updated(ex. v<major>.<minor>.<patch>)
        required: true
        type: string
      ticket-number:
        description: Ticket number to be updated(ex. DX-1234)
        required: true
        type: string
permissions:
  contents: write
jobs:
  build:
    permissions: write-all
    uses: ./.github/workflows/build-release-image.yml
    with:
      version: ${{ inputs.app-version }}
  update-version:
    name: Update app version
    runs-on: ubuntu-latest
    env:
      APP_VERSION: ${{ github.event.inputs.app-version }}
      TICKET_NUMBER: ${{ github.event.inputs.ticket-number }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Update all image tag version
        run: |
          sed -i -r 's/(v[0-9]{8}.[0-9])/${{ env.APP_VERSION }}/g' \
            deployments/kustomize/overlays/staging/kustomization.yaml \
            deployments/kustomize/overlays/production/kustomization.yaml \
            deployments/kustomize/overlays/stable/kustomization.yaml
      - name: Find the latest release tag and branch
        id: release-tag
        run: |
          RELEASE_TAG=$(git describe --tags --abbrev=0)
          echo "RELEASE_TAG=$RELEASE_TAG" >> $GITHUB_OUTPUT
          echo "RELEASE_BRANCH=release-${RELEASE_TAG:1:3}" >> $GITHUB_OUTPUT
      - name: Commit and push
        id: commit
        uses: EndBug/add-and-commit@v9
        with:
          message: "feat: ${{ env.TICKET_NUMBER }} deploy app ${{ env.APP_VERSION }}"
          add: "build/kustomize/overlays/*"
      - name: Cherry-pick commit to latest branch
        run: |
          git checkout ${{ steps.release-tag.outputs.RELEASE_BRANCH }}
          git cherry-pick ${{ steps.commit.outputs.commit_sha }}
          git push origin ${{ steps.release-tag.outputs.RELEASE_BRANCH }}
      - name: Parse semver
        id: semver-parser
        env:
          RELEASE_TAG: ${{ steps.release-tag.outputs.RELEASE_TAG }}
        run: |
          echo "major=$(echo $RELEASE_TAG | cut -d'.' -f1)" >> $GITHUB_OUTPUT
          echo "minor=$(echo $RELEASE_TAG | cut -d'.' -f2)" >> $GITHUB_OUTPUT
          echo "patch=$(echo $RELEASE_TAG | cut -d'.' -f3)" >> $GITHUB_OUTPUT
      - name: Create next version
        id: createversion
        env:
          MAJOR: ${{ steps.semver-parser.outputs.major }}
          MINOR: ${{ steps.semver-parser.outputs.minor }}
          PATCH: ${{ steps.semver-parser.outputs.patch }}
          GH_TOKEN: ${{ github.token }}
        run: |
          PATCH=$((PATCH + 1))
          new_version="$MAJOR.$MINOR.$PATCH"
          git tag "$new_version"
          git push origin "$new_version"
          echo released $new_version
          echo "NEW_VERSION=$new_version" >> $GITHUB_OUTPUT
      - name: Create Release
        id: create-release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.createversion.outputs.NEW_VERSION }}
          generate_release_notes: true
          draft: false
          prerelease: true
